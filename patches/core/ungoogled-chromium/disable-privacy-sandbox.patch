--- a/chrome/browser/privacy_sandbox/privacy_sandbox_settings_delegate.cc
+++ b/chrome/browser/privacy_sandbox/privacy_sandbox_settings_delegate.cc
@@ -16,29 +16,7 @@
 namespace {
 
 bool PrivacySandboxRestrictedByAccountCapability(Profile* profile) {
-  if (privacy_sandbox::kPrivacySandboxSettings4ForceRestrictedUserForTesting
-          .Get()) {
-    return true;
-  }
-  auto* identity_manager = IdentityManagerFactory::GetForProfile(profile);
-
-  if (!identity_manager ||
-      !identity_manager->HasPrimaryAccount(signin::ConsentLevel::kSignin)) {
-    // The user isn't signed in so we can't apply any capabilties-based
-    // restrictions.
-    return false;
-  }
-
-  const auto core_account_info =
-      identity_manager->GetPrimaryAccountInfo(signin::ConsentLevel::kSignin);
-  const AccountInfo account_info =
-      identity_manager->FindExtendedAccountInfo(core_account_info);
-  auto capability =
-      account_info.capabilities.can_run_chrome_privacy_sandbox_trials();
-
-  // The Privacy Sandbox is not considered restricted unless the capability
-  // has a definitive false signal.
-  return capability == signin::Tribool::kFalse;
+  return true;
 }
 
 bool PrivacySandboxRestrictedNoticeRequired(Profile* profile) {
--- a/components/privacy_sandbox/privacy_sandbox_prefs.cc
+++ b/components/privacy_sandbox/privacy_sandbox_prefs.cc
@@ -103,7 +103,7 @@ namespace privacy_sandbox {
 
 void RegisterProfilePrefs(PrefRegistrySimple* registry) {
   registry->RegisterBooleanPref(
-      prefs::kPrivacySandboxApisEnabled, true,
+      prefs::kPrivacySandboxApisEnabled, false,
       user_prefs::PrefRegistrySyncable::SYNCABLE_PREF);
   registry->RegisterBooleanPref(prefs::kPrivacySandboxApisEnabledV2, false);
   registry->RegisterBooleanPref(prefs::kPrivacySandboxM1ConsentDecisionMade,
--- a/components/privacy_sandbox/privacy_sandbox_settings_impl.cc
+++ b/components/privacy_sandbox/privacy_sandbox_settings_impl.cc
@@ -72,7 +72,7 @@ base::Value CreateBlockedTopicEntry(cons
 
 // static
 bool PrivacySandboxSettingsImpl::IsAllowed(Status status) {
-  return status == Status::kAllowed;
+  return false;
 }
 
 PrivacySandboxSettingsImpl::PrivacySandboxSettingsImpl(
@@ -504,20 +504,7 @@ bool PrivacySandboxSettingsImpl::IsPriva
 }
 
 bool PrivacySandboxSettingsImpl::IsPrivacySandboxEnabled() const {
-  PrivacySandboxSettingsImpl::Status status = GetPrivacySandboxAllowedStatus();
-  if (!IsAllowed(status)) {
-    return false;
-  }
-
-  // For Measurement and Relevance APIs, we explicitly do not require the
-  // underlying pref to be enabled if there is a local flag enabling the APIs to
-  // allow for local testing.
-  if (base::FeatureList::IsEnabled(
-          privacy_sandbox::kOverridePrivacySandboxSettingsLocalTesting)) {
-    return true;
-  }
-
-  return pref_service_->GetBoolean(prefs::kPrivacySandboxApisEnabledV2);
+  return false;
 }
 
 void PrivacySandboxSettingsImpl::SetAllPrivacySandboxAllowedForTesting() {
@@ -542,7 +529,6 @@ void PrivacySandboxSettingsImpl::SetTopi
 }
 
 void PrivacySandboxSettingsImpl::SetPrivacySandboxEnabled(bool enabled) {
-  pref_service_->SetBoolean(prefs::kPrivacySandboxApisEnabledV2, enabled);
 }
 
 bool PrivacySandboxSettingsImpl::IsPrivacySandboxRestricted() const {
--- a/content/browser/aggregation_service/aggregation_service_features.cc
+++ b/content/browser/aggregation_service/aggregation_service_features.cc
@@ -9,7 +9,7 @@ namespace content {
 // Enables the Aggregation Service. See crbug.com/1207974.
 BASE_FEATURE(kPrivacySandboxAggregationService,
              "PrivacySandboxAggregationService",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             base::FEATURE_DISABLED_BY_DEFAULT);
 
 const base::FeatureParam<std::string>
     kPrivacySandboxAggregationServiceTrustedServerUrlAwsParam{
--- a/third_party/blink/common/features.cc
+++ b/third_party/blink/common/features.cc
@@ -137,7 +137,7 @@ BASE_FEATURE(kBlockingDownloadsInAdFrame
 // Controls whether the Conversion Measurement API infrastructure is enabled.
 BASE_FEATURE(kConversionMeasurement,
              "ConversionMeasurement",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             base::FEATURE_DISABLED_BY_DEFAULT);
 
 // Controls whether LCP calculations should exclude low-entropy images. If
 // enabled, then the associated parameter sets the cutoff, expressed as the
